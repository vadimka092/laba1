"""
Задана рекуррентная функция. Область определения функции – натуральные числа. Написать программу сравнительного вычисления данной функции рекурсивно и итерационно. Определить границы применимости рекурсивного и итерационного подхода. Результаты сравнительного исследования времени вычисления представить в табличной и графической форме.
F(1) = 4; F(2) = 5; F(n) = (-1)n*(F(n-1)- F(n-2) /(2n)!) при n > 2.
"""
import timeit
import matplotlib.pyplot as plt

# Глобальная переменная для хранения знака
sign = 1

# Кэш для факториалов
cache_F = {}

def recursive_factorial(n):
    if n == 0:
        return 1
    else:
        return n * recursive_factorial(n-1)

def iterative_factorial(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    return result

def dynamic_factorial(n, cache=cache_F):
    if n in cache:
        return cache[n]
    else:
        result = 1
        for i in range(1, n+1):
            result *= i
        cache[n] = result
        return result

def dynamic_F(n, k=1, cache=cache_F):
    global sign
    if n in cache:
        return cache[n]
    else:
        result = 0
        for i in range(1, n+1):
            result += sign * ((dynamic_F(i-1, k, cache) - dynamic_F(i-2, k, cache)) / dynamic_factorial(2*i))
            sign *= -1
        cache[n] = result
        return result

def score_time(func, n):
    return timeit.timeit(lambda: func(n), number=1000)

n_values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

recursive_times = []
iterative_times = []
dynamic_times = []

for n in n_values:
    recursive_times.append(score_time(recursive_factorial, n))
    iterative_times.append(score_time(iterative_factorial, n))
    dynamic_times.append(score_time(dynamic_F, n))

print("Результаты измерения времени выполнения:")
print("{:<10} {:<20} {:<20} {:<20}".format("n", "Рекурсивная", "Итеративная", "Динамическая"))
for i in range(len(n_values)):
    print("{:<10} {:<20.6f} {:<20.6f} {:<20.6f}".format(n_values[i], recursive_times[i], iterative_times[i], dynamic_times[i]))

plt.plot(n_values, recursive_times, label="Рекурсивная")
plt.plot(n_values, iterative_times, label="Итеративная")
plt.plot(n_values, dynamic_times, label="Динамическая")
plt.xlabel("n")
plt.ylabel("Время выполнения (с)")
plt.legend()
plt.show()
